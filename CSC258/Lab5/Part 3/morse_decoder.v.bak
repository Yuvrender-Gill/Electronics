//====================================================================================
// Top module to connect the modules to fpga board.

module more_decoder(SW, KEY, LEDR);
	input [9:0] SW;
	input [3:0] KEY;
	output [9:0]LEDR;
endmodule


//=====================================================================================
//A lookup table to store different alphabetsand their binary pattern reperesentation.

module lookup_table(select, Out);
	input [2:0] select;
	output [13:0] Out;
	
	reg [13:0] Out;
	
	always @(*)
		begin
			case(select)
			3'b000: Out = 14'b00000000010101; //Binary pattern for S
			3'b001: Out = 14'b00000000000111; //Binary pattern for T
			3'b010: Out = 14'b00000001110101; //Binary pattern for U
			3'b011: Out = 14'b00000111010101; //Binary pattern for V
			3'b100: Out = 14'b00000111011101; //Binary pattern for W
			3'b101: Out = 14'b00011101010111; //Binary pattern for X
			3'b110: Out = 14'b01110111010111; //Binary pattern for Y
			3'b111: Out = 14'b00010101110111; //Binary pattern for Z
			endcase
		end
endmodule 

//======================================================================================
//A shifter

module shifter(load, clock, reset_n, par_load, q);
	

//======================================================================================
//A rate divider counter 
module RDcounter(load, clock, reset_n, enable, q);
	input [27:0] load;
	input clock;
	input reset_n;
	input enable;
	output [27:0] q;
	
	reg [27:0] q;
	
	always @(posedge clock)
	begin 
		if (reset_n == 1'b0) begin
			q <= 0;
		end
		else if (enable == 1'b1)
			begin
				if (q == 0)
					q <= load;
				else 
					q <= q - 1'b1;
			end
	end
endmodule 
