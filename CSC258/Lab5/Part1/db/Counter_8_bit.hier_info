|Counter_8_bit
SW[0] => SW[0].IN1
SW[1] => SW[1].IN1
SW[2] => ~NO_FANOUT~
SW[3] => ~NO_FANOUT~
SW[4] => ~NO_FANOUT~
SW[5] => ~NO_FANOUT~
SW[6] => ~NO_FANOUT~
SW[7] => ~NO_FANOUT~
SW[8] => ~NO_FANOUT~
SW[9] => ~NO_FANOUT~
KEY[0] => KEY[0].IN1
KEY[1] => ~NO_FANOUT~
KEY[2] => ~NO_FANOUT~
KEY[3] => ~NO_FANOUT~
HEX0[0] <= hexDisplay:hex0.HEX_out
HEX0[1] <= hexDisplay:hex0.HEX_out
HEX0[2] <= hexDisplay:hex0.HEX_out
HEX0[3] <= hexDisplay:hex0.HEX_out
HEX0[4] <= hexDisplay:hex0.HEX_out
HEX0[5] <= hexDisplay:hex0.HEX_out
HEX0[6] <= hexDisplay:hex0.HEX_out
HEX1[0] <= hexDisplay:hex1.HEX_out
HEX1[1] <= hexDisplay:hex1.HEX_out
HEX1[2] <= hexDisplay:hex1.HEX_out
HEX1[3] <= hexDisplay:hex1.HEX_out
HEX1[4] <= hexDisplay:hex1.HEX_out
HEX1[5] <= hexDisplay:hex1.HEX_out
HEX1[6] <= hexDisplay:hex1.HEX_out


|Counter_8_bit|counter:c1
enable => enable.IN1
clock => clock.IN8
clear_b => clear_b.IN8
Q[0] <= t_flipflop:t1.q
Q[1] <= t_flipflop:t2.q
Q[2] <= t_flipflop:t3.q
Q[3] <= t_flipflop:t4.q
Q[4] <= t_flipflop:t5.q
Q[5] <= t_flipflop:t6.q
Q[6] <= t_flipflop:t7.q
Q[7] <= t_flipflop:t8.q


|Counter_8_bit|counter:c1|t_flipflop:t1
t => q~reg0.ENA
clock => q~reg0.CLK
clear_b => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|counter:c1|t_flipflop:t2
t => q~reg0.ENA
clock => q~reg0.CLK
clear_b => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|counter:c1|t_flipflop:t3
t => q~reg0.ENA
clock => q~reg0.CLK
clear_b => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|counter:c1|t_flipflop:t4
t => q~reg0.ENA
clock => q~reg0.CLK
clear_b => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|counter:c1|t_flipflop:t5
t => q~reg0.ENA
clock => q~reg0.CLK
clear_b => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|counter:c1|t_flipflop:t6
t => q~reg0.ENA
clock => q~reg0.CLK
clear_b => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|counter:c1|t_flipflop:t7
t => q~reg0.ENA
clock => q~reg0.CLK
clear_b => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|counter:c1|t_flipflop:t8
t => q~reg0.ENA
clock => q~reg0.CLK
clear_b => q~reg0.ACLR
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex0
HEX_in[0] => HEX_in[0].IN7
HEX_in[1] => HEX_in[1].IN7
HEX_in[2] => HEX_in[2].IN7
HEX_in[3] => HEX_in[3].IN7
HEX_out[0] <= segment0:ZERO.x
HEX_out[1] <= segment1:ONE.x
HEX_out[2] <= segment2:TWO.x
HEX_out[3] <= segment3:THREE.x
HEX_out[4] <= segment4:FOUR.x
HEX_out[5] <= segment5:FIVE.x
HEX_out[6] <= segment6:SIX.x


|Counter_8_bit|hexDisplay:hex0|segment0:ZERO
c3 => x.IN0
c3 => x.IN0
c3 => x.IN0
c3 => x.IN0
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex0|segment1:ONE
c3 => x.IN1
c3 => x.IN1
c3 => x.IN1
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN0
c1 => x.IN0
c1 => x.IN0
c1 => x.IN0
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex0|segment2:TWO
c3 => x.IN0
c3 => x.IN0
c3 => x.IN0
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex0|segment3:THREE
c3 => x.IN0
c3 => x.IN0
c2 => x.IN0
c2 => x.IN1
c2 => x.IN0
c2 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex0|segment4:FOUR
c3 => x.IN1
c3 => x.IN0
c2 => x.IN0
c2 => x.IN1
c1 => x.IN0
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex0|segment5:FIVE
c3 => x.IN0
c3 => x.IN0
c3 => x.IN1
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN0
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex0|segment6:SIX
c3 => x.IN0
c3 => x.IN1
c3 => x.IN0
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN0
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex1
HEX_in[0] => HEX_in[0].IN7
HEX_in[1] => HEX_in[1].IN7
HEX_in[2] => HEX_in[2].IN7
HEX_in[3] => HEX_in[3].IN7
HEX_out[0] <= segment0:ZERO.x
HEX_out[1] <= segment1:ONE.x
HEX_out[2] <= segment2:TWO.x
HEX_out[3] <= segment3:THREE.x
HEX_out[4] <= segment4:FOUR.x
HEX_out[5] <= segment5:FIVE.x
HEX_out[6] <= segment6:SIX.x


|Counter_8_bit|hexDisplay:hex1|segment0:ZERO
c3 => x.IN0
c3 => x.IN0
c3 => x.IN0
c3 => x.IN0
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex1|segment1:ONE
c3 => x.IN1
c3 => x.IN1
c3 => x.IN1
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN0
c1 => x.IN0
c1 => x.IN0
c1 => x.IN0
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex1|segment2:TWO
c3 => x.IN0
c3 => x.IN0
c3 => x.IN0
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex1|segment3:THREE
c3 => x.IN0
c3 => x.IN0
c2 => x.IN0
c2 => x.IN1
c2 => x.IN0
c2 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex1|segment4:FOUR
c3 => x.IN1
c3 => x.IN0
c2 => x.IN0
c2 => x.IN1
c1 => x.IN0
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex1|segment5:FIVE
c3 => x.IN0
c3 => x.IN0
c3 => x.IN1
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN0
c1 => x.IN1
c0 => x.IN1
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


|Counter_8_bit|hexDisplay:hex1|segment6:SIX
c3 => x.IN0
c3 => x.IN1
c3 => x.IN0
c2 => x.IN1
c2 => x.IN1
c2 => x.IN1
c1 => x.IN1
c1 => x.IN1
c1 => x.IN0
c0 => x.IN1
c0 => x.IN1
x <= x.DB_MAX_OUTPUT_PORT_TYPE


