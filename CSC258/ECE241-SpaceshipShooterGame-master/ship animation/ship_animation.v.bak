// Etch-and-sketch

module project

 (

  CLOCK_50,      // On Board 50 MHz

  KEY,       // Push Button[3:0]

  SW,        // DPDT Switch[17:0]

  VGA_CLK,         // VGA Clock

  VGA_HS,       // VGA H_SYNC

  VGA_VS,       // VGA V_SYNC

  VGA_BLANK,      // VGA BLANK

  VGA_SYNC,      // VGA SYNC

  VGA_R,         // VGA Red[9:0]

  VGA_G,        // VGA Green[9:0]

  VGA_B,        // VGA Blue[9:0]

  LEDG

  

 );

 input   CLOCK_50;    // 50 MHz

 input [3:0] KEY;     // Button[3:0]

 input [17:0]SW;      // Switches[17:0]

 output   VGA_CLK;       // VGA Clock

 output   VGA_HS;     // VGA H_SYNC

 output   VGA_VS;     // VGA V_SYNC

 output   VGA_BLANK;    // VGA BLANK

 output   VGA_SYNC;    // VGA SYNC

 output [9:0] VGA_R;       // VGA Red[9:0]

 output [9:0] VGA_G;      // VGA Green[9:0]

 output [9:0] VGA_B;       // VGA Blue[9:0]

 output reg [3:0] LEDG;

 

 

 

 

 

 // Create the color, x, y and writeEn wires that are inputs to the controller.

 //reg [2:0] color;

 

 //reg [7:0] x;

 //reg [6:0] y;

 

 wire [7:0] x;

 wire [6:0] y;

 wire [7:0]x_plot;

 wire [6:0]y_plot;

 reg [2:0] color;

 wire [7:0] w_addr;

 wire [2:0] w_color;

 wire [2:0] erase_color;

 reg writeEn;

 

 // For Erase

 reg erase_done;

 assign erase_color = 3'b000;

 

 // Movement Directions

 wire left;

 wire right;

 wire up;

 wire down;

 wire enable_move;

 assign left = ~KEY[1];

 assign right = ~KEY[0];

 assign up = ~KEY[2];

 assign down = ~KEY[3];

 assign enable_move = left|right|up|down;

 integer move_count = 0;

 

 // To update x and y for input to the vga

 integer x_position;

 integer y_position;

 reg update_done;

 

 assign x_plot = x + x_offset + y_offset;

 assign y_plot = y + y_offset + y_offset;

 

 

 

 wire resetn;

 //assign resetn = KEY[0];

 

// assign color[2:0] = SW[17:15];

 assign x[7:0] = SW[7:0];

 assign y[6:0] = SW[14:8];

  

  

 reg [1:0] current_state,next_state;

 

 integer x_offset;

 integer y_offset;

 

 integer done_one_row;

 integer done_one_box;

 

 integer exceeds_x_boundaries;

 integer exceeds_y_boundaries;

 

 integer reseter;

 integer reseter_x;

 integer reseter_y;

 

 

 initial begin

 current_state = 2'b11;

 next_state = 2'b00;

 

 x_offset = 0;

 y_offset = 0;

 x_position = 0;

 y_position = 0;

 done_one_row = 0;

 done_one_box = 0; //to ensure 1 box is drawn

 exceeds_x_boundaries = 0; //for setting boundaries

 exceeds_y_boundaries = 0;

 

 reseter = 0; //for resetting

 reseter_x = 0;

 reseter_y = 0;

 

 

 end

 

 // Create an Instance of a VGA controller - there can be only one!

 // Define the number of colours as well as the initial background

 // image file (.MIF) for the controller.

 vga_adapter VGA(

  // .resetn(resetn),

   .clock(CLOCK_50),

   .colour(color),

   .x(x_plot),//SW[7:0] + x_offset

   .y(y_plot),//SW[14:8] + y_offset

   .plot(writeEn),

   /* Signals for the DAC to drive the monitor. */

   .VGA_R(VGA_R),

   .VGA_G(VGA_G),

   .VGA_B(VGA_B),

   .VGA_HS(VGA_HS),

   .VGA_VS(VGA_VS),

   .VGA_BLANK(VGA_BLANK),

   .VGA_SYNC(VGA_SYNC),

   .VGA_CLK(VGA_CLK)); //vga_adapter module ends here

  defparam VGA.RESOLUTION = "160x120";

  defparam VGA.MONOCHROME = "FALSE";

  defparam VGA.BITS_PER_COLOUR_CHANNEL = 1;

  //defparam VGA.BACKGROUND_IMAGE = "display.mif";

   

 // Put your code here. Your code should produce signals x,y,color and writeEn

 // for the VGA controller, in addition to any other functionality your design may require.

 ship_mem anirom (

 .address(w_addr),

 .clock(CLOCK_50),

 .q(w_color));

 

assign w_addr = x_offset + 15*y_offset;

 

 parameter [1:0] IDLE = 2'b00, ERASE = 2'b01, UPDATE = 2'b10, DRAW = 2'b11;

 

 

 always@(*)

 begin: state_table

  case(current_state)

   

   IDLE: 

		if( (enable_move == 1) | (exceeds_x_boundaries ==1) | (exceeds_y_boundaries ==1) ) 

      begin

			next_state = ERASE; 

      end

      

		else 

			next_state = IDLE;

   

	ERASE:

		if(erase_done == 1)

			next_state = UPDATE;

		

		else

			next_state = ERASE;

	

	UPDATE:

		if(update_done == 1)

			next_state = DRAW;

		

		else

			next_state = UPDATE;

   

   DRAW: 

		if(((done_one_box == 1) & (enable_move == 1)) | exceeds_x_boundaries ==1 | exceeds_y_boundaries ==1)

			next_state = ERASE; //if done with Q then go to idle?????????????????????

      

		else if(done_one_box == 1 & enable_move == 0)

			next_state = IDLE;

			

		else

			next_state = DRAW;

      

     

   default: next_state = IDLE; //default state

    

  endcase

   

 end

 

 always@(posedge CLOCK_50)

  begin: state_FFS

   current_state<=next_state;  

  end

  

 //assign writeEn = (current_state == DRAW);

 

 

 always@(posedge CLOCK_50)

 begin//-----------------------------------------main

  //color<=SW[17:15];

  //x<=SW[7:0];

  //y<=SW[14:8];

  /*

  if(x+5>160)

   begin

    exceeds_x_boundaries <= 1;

   end

     

  else if(y+5>120)

   begin

    exceeds_y_boundaries <= 1;

   end

  

  else*/

  //begin//---------------------------------------------------------------------------1

  

  if(current_state == ERASE)

  begin

	color <= erase_color;

	writeEn <= 1;

	//erase_done <= 0?

	exceeds_x_boundaries <= 0;

	exceeds_x_boundaries <= 0;

     

                  if(x_offset<15)

                   x_offset <= x_offset + 1;

                  

                  else if(x_offset==15) //one row drawn

                   begin//---------------------------------------------------------------------3

                    x_offset <= 0;

                    done_one_row <= 1;

                    

                    

                     if(y_offset<9)

                      begin//-------------------------------------------4

                      y_offset <= y_offset + 1; //go to next row

                      end//---------------------------------------------4

                     else if (y_offset ==9) //all rows down, i.e box drawn

                      begin//----------------------------------------------------5

                       erase_done <= 1;

                       y_offset<=0;

                       x_offset<=0;

                      end//-------------------------------------------------------5

                   end//-----------------------------------------------------------------------3

  

  end

  

  

  if(current_state == UPDATE)

  begin

	if(left == 1)

		x_position <= x_position + 1;

	

	if(right == 1)

		x_position <= x_position - 1;

	

	if(up == 1)

		y_position <= y_position + 1;

		

	if(down == 1)

		y_position <= y_position - 1;

		

	update_done <= 1; 




//end

  end

  

  

  

   if((current_state == DRAW)) //& (KEY[0] == 1)) //draw squares

    begin//-----------------------------------------2

		color <= w_color;

		writeEn <= 1;

      exceeds_x_boundaries <= 0;

      exceeds_x_boundaries <= 0;

      

     

                  

                  if(x_offset<15)

                   x_offset <= x_offset + 1;

     

     

                  

                  else if(x_offset==15) //one row drawn

                   begin//---------------------------------------------------------------------3

                    x_offset <= 0;

                    done_one_row <= 1;

                    

                    

                     if(y_offset<9)

                      begin//-------------------------------------------4

                      y_offset <= y_offset + 1; //go to next row

                      end//---------------------------------------------4

                     else if (y_offset ==9) //all rows down, i.e box drawn

                      begin//----------------------------------------------------5

                       done_one_box <= 1;

                       y_offset<=0;

                       x_offset<=0;

                      end//-------------------------------------------------------5

                   end//-----------------------------------------------------------------------3

      

    end//------------------------------------------2

    

    /*

   else if((current_state == Draw) & (KEY[0] == 0)) //reset

    begin

     color <= 3'b111;

     LEDG[0] <= 1'b1;

     

     x_offset<=0;

     y_offset<=0;

     

     x<=0;

     y<=0;

    

     

     for(reseter_y = 0;reseter_y<120;reseter_y = reseter_y + 1)

      begin

       for(reseter_x = 0;reseter_x<160;reseter_x = reseter_x + 1)

        begin

         

        

        end

        reseter_x=0;

        

      end

    end

     */

    	 

 // end//-------------------------------------------------------------------------------1

  

 end//----------------------------------main
 
 endmodule
 